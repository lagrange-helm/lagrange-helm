apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lagrange.fullname" . }}
  labels:
    {{- include "lagrange.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "lagrange.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lagrange.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - "--"
          args:
            - "if [ ! -f '/app/data/appsettings.json' ] && [ -f '/init_config/appsettings.json' ]; then cp /init_config/appsettings.json /app/data/appsettings.json; fi && if [ ! -f '/app/data/device.json' ] && [ -f '/init_config/device.json' ]; then cp /init_config/device.json /app/data/device.json; fi && if [ ! -f '/app/data/keystore.json' ] && [ -f '/init_config/keystore.json' ]; then cp /init_config/keystore.json /app/data/keystore.json; fi"
          volumeMounts:
            - name: config
              mountPath: "/init_config"
            - name: data
              mountPath: "/app/data"
      containers:
        - name: {{ .Chart.Name }}
          tty: true
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: "/init_config"
            - name: data
              mountPath: "/app/data"
      volumes:
        - name: config
          secret:
            secretName: {{ include "lagrange.fullname" . }}
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "lagrange.fullname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
